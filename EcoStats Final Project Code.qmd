# EcoStats Final Project
Name: Josie Pilchik <br>
Date: 5/15/2024

Response variable: <br>
-distMoved <br>

Potential explanatory variables (to be explored through data exploration): <br>
-year <br>
-month <br>
-section (the section the fish is found in at each of the sampling events) <br>
-observedLength <br>
-observedWeight <br>
-meanTemperature <br>
-meanFlowByRiver

Random effects variables: <br>
-tag

## Data loading
```{r}
# load packages needed later
library(GGally)
library(ggplot2)
library(pROC)
library(AICcmodavg)
library(car)
library(DHARMa)
library(MuMIn)
library(lme4)
library(tidyverse)
library(dplyr)
```

Load the dataset with all of the wanding and environmental data into R.
```{r load in data table}
cdWB <- read.csv('/Users/jpilchik/OneDrive - DOI/Documents/Wanding_Data/data/cdWB_All.csv', header=T)
```

Filter the dataset to include only the Obear brook observations.
```{r filter to just Obear}
#specify team names to keep
river_name <- 'wb obear'

#select all rows where team is in list of team names to keep
obear_All <- cdWB %>% filter(river %in% river_name)
head(obear_All)
```

Break the date observations into month and year so that those variables can be used separately as explanatory variables.
```{r}
obear <- separate(obear_All, detectionDate, into = c('year', 'month', 'day', 'time')) %>% dplyr::select(-one_of('day','time'))
head(obear)
```

Filter the dataset to include only the relevant explanatory variables.
```{r}
obear <- obear %>% dplyr::select(tag, year, month, river, section, observedLength, observedWeight, meanTemperature, meanFlowByRiver, isYOY, distMoved, moveDir)
head(obear)
```

```{r}
# Remove NA values
sub <- obear[!is.na(obear$distMoved),]
sub <- sub[!is.na(sub$observedLength),]
sub <- sub[!is.na(sub$observedWeight),]
head(sub)
```

```{r}
# Separate adults from YOY
sub$isYOY <- as.factor(sub$isYOY)
adult_all <- sub[ which(sub$isYOY=='FALSE'), ]
```

```{r}
# Remove the -90 value
adult <- adult_all[-which(adult_all$distMoved==-90), ]

# Create a new distMovedp column that removes negative values
adult$distMovedp <- abs(adult$distMoved)

#rescale explanatory variables
adult$observedWeightz <- c(scale(adult$observedWeight))
adult$meanTemperaturez <- c(scale(adult$meanTemperature))
adult$meanFlowByRiverz <- c(scale(adult$meanFlowByRiver))
adult$observedLengthz <- c(scale(adult$observedLength))

# Turn categorical variables into factors
adult$year <- as.factor(adult$year)
adult$month <- as.factor(adult$month)
adult$section <- as.factor(adult$section)

adult$tag <- trimws(adult$tag)
# Convert 'tag' to a factor to assign unique levels
adult$tag_factor <- factor(adult$tag)
# Convert the factor levels to sequential ID numbers
adult$tagID <- as.numeric(adult$tag_factor)
adult$tagID_factor <- factor(adult$tagID)

head(adult)
summary(adult)
```

## Data exploration
```{r}
adult$non_zero <- ifelse(adult$distMovedp > 0, 1, 0)
```

```{r}
# pairs plot to visualize all data
covs <- c("year", "month", "section", "observedLengthz", "observedWeightz", "meanTemperaturez", "meanFlowByRiverz", "non_zero")
ggpairs(adult[,covs])
```
```{r}
rm(covs)
```

```{r}
length(adult$non_zero[which(adult$non_zero==0)]) # number of 0's
length(adult$non_zero[which(adult$non_zero==1)]) # number of 1's
mean(adult$non_zero) # proportion of ones (~p)
par(mfrow=c(1,1))
hist(adult$non_zero, breaks=seq(0,1,0.1), col="lightblue")
```

```{r}
ggplot(adult, aes(meanTemperaturez, non_zero)) +
geom_point() +
geom_smooth(method = "loess") +
geom_hline(yintercept = 0) +
theme_bw()

ggplot(adult, aes(meanFlowByRiver, non_zero)) +
geom_point() +
geom_smooth(method = "loess") +
geom_hline(yintercept = 0) +
theme_bw()
```
```{r}
# Count the frequency of each tag ID
tag_counts <- table(adult$tagID_factor)

# Create a bar plot
barplot(tag_counts, 
        main = "Frequency of Observations by Tag ID", 
        xlab = "Tag ID", 
        ylab = "Frequency",
        col = "skyblue",
        border = "black",
        las = 2,  # Rotate x-axis labels vertically for better readability
        cex.names = 0.6  # Adjust the size of x-axis labels
        )
```
```{r}
# Count the frequency of each section
section_counts <- table(adult$section)

# Create a bar plot
barplot(section_counts, 
        main = "Frequency of Observations by Section", 
        xlab = "Section", 
        ylab = "Frequency",
        col = "skyblue",
        border = "black",
        las = 2,  # Rotate x-axis labels vertically for better readability
        cex.names = 0.6  # Adjust the size of x-axis labels
        )
```

## Movers vs Stayers model fitting
```{r}
vif(glm(non_zero ~ year + month + section + observedLengthz + observedWeightz + meanTemperaturez + meanFlowByRiverz, data=adult, family=binomial(link=logit), na.action = "na.omit"))
```
```{r}
vif(glm(non_zero ~ meanTemperaturez + month, data=adult, family=binomial(link=logit), na.action = "na.omit"))

vif(glm(non_zero ~ observedLengthz + observedWeightz, data=adult, family=binomial(link=logit), na.action = "na.omit"))
```
```{r}
fitList <- list(
"a.month" = glm(non_zero ~ year + month + section + observedLengthz + observedWeightz + meanFlowByRiverz, data=adult, family=binomial(link=logit)),
"a.temperature" = glm(non_zero ~ year + section + observedLengthz + observedWeightz + meanTemperaturez + meanFlowByRiverz, data=adult, family=binomial(link=logit))
)
aictab(fitList)
```
```{r}
fitList <- list(
"a.length" = glm(non_zero ~ year + month + section + observedLengthz + meanTemperaturez + meanFlowByRiverz, data=adult, family=binomial(link=logit)),
"a.weight" = glm(non_zero ~ year + month + section + observedWeightz + meanTemperaturez + meanFlowByRiverz, data=adult, family=binomial(link=logit))
)
aictab(fitList)
```
```{r}
vif(glm(non_zero ~ year + section + observedWeightz + meanTemperaturez + meanFlowByRiverz, data=adult, family=binomial(link=logit), na.action = "na.omit"))

vif(glm(non_zero ~ section + observedWeightz + meanTemperaturez + meanFlowByRiverz, data=adult, family=binomial(link=logit), na.action = "na.omit"))
```
```{r}
rm(fitList)
```

```{r}
#Remove year due to collinearity - test it with tag later as a nested random effect
b.full <- glm(non_zero ~ section + observedWeightz + meanTemperaturez*meanFlowByRiverz, 
             family = binomial(link = logit),
             data = adult, na.action = "na.fail")

dredge(b.full, rank = "AIC")
```
```{r}
b.null <- glm(non_zero ~ 1, data=adult, family = binomial(link = logit))
b.top <- glm(non_zero ~ section + observedWeightz + meanTemperaturez, data=adult, family = binomial(link = logit))
b.glmm <- glmer(non_zero ~ section + observedWeightz + meanTemperaturez + (1|tagID_factor), data=adult, family = binomial(link = logit), control = glmerControl(optimizer = "bobyqa", 
                                       optCtrl = list(maxfun = 100000)))
anova(b.glmm, b.top, b.null)
```
```{r}
b.null <- glm(non_zero ~ 1, data=adult, family = binomial(link = logit))
b.top <- glm(non_zero ~ section + observedWeightz + meanTemperaturez, data=adult, 
             family = binomial(link = logit))
b.glmm <- glmer(non_zero ~ section + observedWeightz + meanTemperaturez + (1|tagID_factor), 
                data=adult, family = binomial(link = logit), 
                control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
b.glmm0 <- glmer(non_zero ~ 1 + (1|tagID_factor), data=adult, family = binomial(link = logit), 
                 control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
b.nglmm0 <- glmer(non_zero ~ 1 + (1|year/tagID_factor), data=adult, 
                  family = binomial(link = logit),
                  control = glmerControl(optimizer = "bobyqa", 
                                         optCtrl = list(maxfun = 100000)))
b.nglmm <- glmer(non_zero ~ section + observedWeightz + meanTemperaturez +
                   (1|year/tagID_factor),
                 data=adult, family = binomial(link = logit), 
                 control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))

b.list <- list(
"m0" = b.null,
"m1" = b.top,
"mm0" = b.glmm0,
"mm1" = b.glmm,
"nmm0" = b.nglmm0,
"nmm1" = b.nglmm
)

aic.table <- data.frame(AIC = sapply(b.list, AIC))
aic.table$Delta.AIC <- aic.table$AIC - min(aic.table$AIC)
aic.table <- aic.table[order(aic.table$AIC),]
aic.table[1:6,]
```
```{r}
rm(b.full, b.top, b.glmm, b.nglmm0, b.nglmm, aic.table, b.list)
```

```{r}
#Define the best model based on the above information (that being b.glmm/mm1)
b.best <- glmer(non_zero ~ section + observedWeightz + meanTemperaturez + (1|tagID_factor), data=adult, family = binomial(link = logit), control = glmerControl(optimizer = "bobyqa", 
                                       optCtrl = list(maxfun = 100000)))
summary(b.best)
```
```{r}
# Simulate residuals with the top glmm model
b.best.simResid <- simulateResiduals(fittedModel = b.best, plot = F)
plot(b.best.simResid)
```
```{r}
rm(b.best.simResid)
```

```{r}
myroc <- roc(adult$non_zero, predict(b.best, adult, type = "response"))
ggroc(myroc, legacy.axes = TRUE) +
  labs(x = 'False-positive rate', y = 'True-positive rate',
       title = 'Simulated ROC curve for Best model') + 
  annotate('text', x = .5, y = .5, 
           label = paste0('AUC: ', round(auc(myroc), 
                                         digits = 2)))

myglmm0roc <- roc(adult$non_zero, predict(b.glmm0, adult, type = "response"))
ggroc(myglmm0roc, legacy.axes = TRUE) +
  labs(x = 'False-positive rate', y = 'True-positive rate',
       title = 'Simulated ROC curve for Null model with 
       random effect') + 
  annotate('text', x = .5, y = .5, 
           label = paste0('AUC: ', round(auc(myglmm0roc), 
                                         digits = 2)))

myglm0roc <- roc(adult$non_zero, predict(b.null, adult, type = "response"))
ggroc(myglm0roc, legacy.axes = TRUE) +
  labs(x = 'False-positive rate', y = 'True-positive rate',
       title = 'Simulated ROC curve for Null model') + 
  annotate('text', x = .5, y = .5, 
           label = paste0('AUC: ', round(auc(myglm0roc), 
                                         digits = 2)))
```
```{r}
# Extract unique levels of 'tag' from the original data
tag_levels <- levels(adult$tagID_factor)

# Create df.predict with 'tag' included using the existing levels
df.predict <- expand.grid(
  meanTemperaturez = seq(min(adult$meanTemperaturez), max(adult$meanTemperaturez), length=100),
  observedWeightz = mean(adult$observedWeightz),
  section = unique(adult$section),
  tagID_factor = tag_levels  # Include 'tag' using existing levels
)

# 1. Generate predictions on the response scale
predictions <- predict(b.best, newdata = df.predict, type = "response")

# 2. Create a dataframe with predictions and relevant predictor variables
df.pred <- cbind(df.predict, predictions)

# Calculate confidence intervals 
# df.pred$ci.lo <- df.pred$fit - 1.96 * df.pred$se.fit
# df.pred$ci.hi <- df.pred$fit + 1.96 * df.pred$se.fit

# unscale our explanatory variables
df.pred$meanTemperature <- (df.pred$meanTemperaturez*sd(adult$meanTemperature,na.rm = TRUE)) +
  mean(adult$meanTemperature,na.rm = TRUE)
df.pred$observedWeight <- (df.pred$observedWeightz*sd(adult$observedWeight,na.rm = TRUE)) +
  mean(adult$observedWeight,na.rm = TRUE)

df.predaverage <- df.pred %>% group_by(meanTemperature, observedWeight, section) %>% 
  mutate(meanpred = mean(predictions))

# 3. Plot the predictions
ggplot(df.predaverage, aes(x = meanTemperature, y = meanpred, color = section, 
                           fill = section)) +
  geom_line() +
  xlab("Mean Temperature (C)") +
  ylab("Predicted Probability of Being a Mover") +
  theme_minimal()

```

```{r}
# Extract unique levels of 'tag' from the original data
tag_levels <- levels(adult$tagID_factor)

# Create df.predict with 'tag' included using the existing levels
df.predict <- expand.grid(
  observedWeightz = seq(min(adult$observedWeightz), max(adult$observedWeightz), length=100),
  meanTemperaturez = mean(adult$meanTemperaturez),
  section = unique(adult$section),
  tagID_factor = tag_levels  # Include 'tag' using existing levels
)

# 1. Generate predictions on the response scale
predictions <- predict(b.best, newdata = df.predict, type = "response")

# 2. Create a dataframe with predictions and relevant predictor variables
df.pred <- cbind(df.predict, predictions)

# Calculate confidence intervals 
# df.pred$ci.lo <- df.pred$fit - 1.96 * df.pred$se.fit
# df.pred$ci.hi <- df.pred$fit + 1.96 * df.pred$se.fit

# unscale our explanatory variables
df.pred$meanTemperature <- (df.pred$meanTemperaturez*sd(adult$meanTemperature,na.rm = TRUE)) +
  mean(adult$meanTemperature,na.rm = TRUE)
df.pred$observedWeight <- (df.pred$observedWeightz*sd(adult$observedWeight,na.rm = TRUE)) +
  mean(adult$observedWeight,na.rm = TRUE)

df.predaverage <- df.pred %>% group_by(meanTemperature, observedWeight, section) %>% 
  mutate(meanpred = mean(predictions))

# 3. Plot the predictions
ggplot(df.predaverage, aes(x = observedWeight, y = meanpred, color = section, fill = section)) +
  geom_line() +
  xlab("Observed Weight (g)") +
  ylab("Predicted Probability of Being a Mover") +
  theme_minimal()

```

